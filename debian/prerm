#!/bin/bash -e
# vim: noet

# This prerm script will remove the user and group for the package if it exists.
# But it will not remove the user's home directory.

ONESSH_USER=onechad
ONESSH_GROUP=onessh
ONESSH_SHARED_GROUP=onessh-shared
ONESSH_SHELL=/usr/bin/onessh
ONESSH_KEY_DIR=/etc/ssh/onessh_keys

_warn_home() {
	local home=$1
	echo "The home directory \"$home\" is kept, " \
		"please remove it manually if you think it's no longer needed."
}

_remove() {
	# Remove onessh from /etc/shells
	if grep -q "$ONESSH_SHELL" /etc/shells; then
		sed -i "\:$ONESSH_SHELL:d" /etc/shells
	fi

	# Remove the user if it exists
	if getent passwd $ONESSH_USER >/dev/null; then
		userdel $ONESSH_USER >/dev/null
	fi

	# Remove the groups if they exist
	if getent group $ONESSH_GROUP >/dev/null; then
		groupdel $ONESSH_GROUP >/dev/null
	fi
	if getent group $ONESSH_SHARED_GROUP >/dev/null; then
		groupdel $ONESSH_SHARED_GROUP >/dev/null
	fi

	echo "Removed user \"$ONESSH_USER\", groups" \
		"\"$ONESSH_GROUP\" and \"$ONESSH_SHARED_GROUP\""
	_warn_home "/home/$ONESSH_USER"

	shopt -s nullglob
	local user
	for key in "$ONESSH_KEY_DIR"/*; do
		user=$(basename "$key")
		if [ -f "$user" ]; then
			echo "Removing \"$user\"'s SSH keys"
			rm -f "$key"
			userdel "$user"
			_warn_home "/home/$user"
		fi
	done
}

case "$1" in
	remove|deconfigure)
		_remove
		;;
	upgrade|failed-upgrade)
		;;
	*)
		echo "prerm called with unknown argument \`$1'" >&2
		exit 1
		;;
esac
