#!/bin/bash -e
# vim: noet

# This postinst script will add a user and group for the package if it
# doesn't already exist.

ONESSH_USER=onechad
ONESSH_GROUP=onessh
ONESSH_SHARED_GROUP=onessh-shared
ONESSH_SHELL=/usr/bin/onessh
ONESSH_HOME=/home/$ONESSH_USER
ONESSH_RC=$ONESSH_HOME/.onesshrc
ONESSH_CHAD_KEYFILE=$ONESSH_HOME/.ssh/authorized_keys

_configure() {
	# Append onessh to /etc/shells if it's not already there
	if ! grep -q $ONESSH_SHELL /etc/shells; then
		echo $ONESSH_SHELL >> /etc/shells
	fi

	# Create the groups if they don't exist
	if ! getent group $ONESSH_GROUP >/dev/null; then
		groupadd --system $ONESSH_GROUP
	fi
	if ! getent group $ONESSH_SHARED_GROUP >/dev/null; then
		groupadd --system $ONESSH_SHARED_GROUP
	fi

	# Create the user if it doesn't exist
	if ! getent passwd $ONESSH_USER >/dev/null; then
		useradd --system \
			--gid $ONESSH_GROUP \
			--home $ONESSH_HOME \
			--shell $ONESSH_SHELL \
			--comment "OneSSH CHAD" \
			$ONESSH_USER
		passwd -d $ONESSH_USER
		usermod -aG sudo $ONESSH_USER
	fi

	if [ ! -d $ONESSH_HOME ]; then
		mkdir $ONESSH_HOME
		chown $ONESSH_USER:$ONESSH_GROUP $ONESSH_HOME
	fi

	if [ -z "$ONESSH_SHARED_USERS" ]; then
		local current_user=${SUDO_USER:-$USER}
		>&2 echo "\$ONESSH_SHARED_USERS is not set," \
			"use \"$current_user\" as the only shared user."
		ONESSH_SHARED_USERS=$current_user
	fi
	
	# shellcheck disable=SC2206
	ONESSH_SHARED_USERS_ARR=(${ONESSH_SHARED_USERS})
	for user in "${ONESSH_SHARED_USERS_ARR[@]}"; do
		if ! getent passwd "$user" >/dev/null; then
			>&2 echo "User \"$user\" does not exist, skipping."
			continue
		fi
		usermod -aG $ONESSH_SHARED_GROUP "$user"
		echo "User \"$user\" is added to \"$ONESSH_SHARED_GROUP\" group."
	done

	if [ -n "$ONESSH_IMPORT_KEYFILE" ]; then
		>&2 echo "Overwrite \$ONESSH_ALLOWED_USERS with lp users in \"$ONESSH_IMPORT_KEYFILE\"."
		ONESSH_ALLOWED_USERS=$(grep -oP "# ssh-import-id lp:\K.*$" "$ONESSH_IMPORT_KEYFILE" | uniq)
		if [ -z "$ONESSH_ALLOWED_USERS" ]; then
			>&2 echo "No users found in \"$ONESSH_IMPORT_KEYFILE\"."
		fi
	fi

	if [ -z "$ONESSH_ALLOWED_USERS" ]; then
		>&2 echo "\$ONESSH_ALLOWED_USERS is not set," \
			"no users will be allowed to use OneSSH."
		>&2 echo "Please remember to set it in $ONESSH_RC," \
			"and import SSH keys into \"/etc/ssh/$ONESSH_USER\"."
	fi

	if [ -z "$ONESSH_SHARED_LOGIN" ]; then
		ONESSH_SHARED_LOGIN="all"
		>&2 echo "\$ONESSH_SHARED_LOGIN is not set," \
			"all users can login to the shared account when no user is checked-in."
		>&2 echo "You can set it to \"none\" to disable shared login." \
			"Or \"one\" to allow only one checked-in user to login."
	fi

	if [ ! -f "$ONESSH_RC" ]; then
		cat <<- EOF > $ONESSH_RC
		# OneSSH configuration
		# List of users allowed to use OneSSH
		ONESSH_ALLOWED_USERS=\"$ONESSH_ALLOWED_USERS\"
		# Who can login to the shared account
		#  - "all":  all users can login when no user is checked-in
		#  - "one":  only the checked-in user
		#  - "none": disable shared login
		#            (Please make sure you know what you are doing)
		ONESSH_SHARED_LOGIN=\"$ONESSH_SHARED_LOGIN\"
		# Enable debug print
		# ONESSH_DEBUG=1
		# Enable bash option \`set -x\`
		# ONESSH_VERBOSE=1
		EOF
		chmod 466 $ONESSH_RC
	fi

	if [ ! -d "$ONESSH_HOME/.ssh" ]; then
		mkdir "$ONESSH_HOME/.ssh"
		if [ ! -f "$ONESSH_CHAD_KEYFILE" ]; then
			touch "$ONESSH_CHAD_KEYFILE"
		fi
	fi

	# disable motd for chad user
	if [ ! -f "$ONESSH_HOME/.hushlogin" ]; then
		touch "$ONESSH_HOME/.hushlogin"
	fi

	if [ -n "$ONESSH_IMPORT_KEYFILE" ]; then
		>&2 echo "Importing SSH keys from \"$ONESSH_IMPORT_KEYFILE\"."
		cp "$ONESSH_IMPORT_KEYFILE" "$ONESSH_CHAD_KEYFILE"
	else
		# shellcheck disable=SC2206
		ONESSH_ALLOWED_USERS_ARR=(${ONESSH_ALLOWED_USERS})
		for user in "${ONESSH_ALLOWED_USERS_ARR[@]}"; do
			ssh-import-id "lp:$user" -o "$ONESSH_CHAD_KEYFILE"
		done
	fi

	chown -R $ONESSH_USER:$ONESSH_GROUP $ONESSH_HOME
	systemctl restart ssh.service
}

case "$1" in
	configure)
		_configure
		;;
	abort-upgrade|abort-remove|abort-deconfigure)
		;;
	*)
		>&2 echo "postinst called with unknown argument \`$1'" >&2
		exit 1
		;;
esac
